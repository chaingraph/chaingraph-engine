version: '3.5'

services:
  postgres:
    container_name: chaingraph_postgres
    image: postgres:10.4
    volumes: 
      - chaingraph-postgres-data-volume:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      DB_NAME: chaingraph
      DB_USER: user
      DB_PASSWORD: pass
      POSTGRES_DB: chaingraph

  hasura:
    container_name: chaingraph_hasura
    image: hasura/graphql-engine:v1.3.3.cli-migrations-v2
    ports:
      - '8088:8080'
    depends_on:
      - postgres
    restart: always
    environment:
      # https://hasura.io/docs/1.0/graphql/core/deployment/graphql-engine-flags/reference.html
      HASURA_GRAPHQL_DATABASE_URL: postgres://user:pass@postgres:5432/chaingraph?sslmode=disable
      HASURA_GRAPHQL_MIGRATIONS_DIR: /hasura-migrations
      HASURA_GRAPHQL_METADATA_DIR: /hasura-metadata
      # HASURA_GRAPHQL_ADMIN_SECRET: =NBc;?2eduh)?mxq
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_GRAPHQL_CORS_DOMAIN: '*'
      VIRTUAL_HOST: ${CHAINGRAPH_API_DOMAIN}
      VIRTUAL_PORT: 8088
      LETSENCRYPT_HOST: ${CHAINGRAPH_API_DOMAIN}
      LETSENCRYPT_EMAIL: admin@blockmatic.io
    networks:
      default:
        aliases:
          - ${CHAINGRAPH_API_DOMAIN}
    volumes:
      - ./services/hasura/migrations:/hasura-migrations #  mount hasura migrations folder
      - ./services/hasura/metadata:/hasura-metadata #  mount hasura metadata folder
    command:
      - graphql-engine
      - serve

  core:
    container_name: chaingraph_core
    build:
      context: ./services/core
    depends_on:
      - hasura
    environment:
      HASURA_API: ${HASURA_API}
      EOS_NODEOS_HOST: ${EOS_NODEOS_HOST}
      EOS_NODEOS_PORT: ${EOS_NODEOS_PORT}
      WAIT_HOSTS: ${HASURA_HOST}:8088
      WAIT_HOSTS_TIMEOUT: 60
    ports:
      - '3030:3030'

  nginx:
    container_name: chaingraph_nginx
    image: nginx
    ports:
      - 0.0.0.0:80:80
      - 0.0.0.0:443:443
    environment:
      DHPARAM_GENERATION: 0
    restart: always
    volumes:
      - ./services/nginx/conf.d:/etc/nginx/conf.d
      - ./services/nginx/vhost.d:/etc/nginx/vhost.d
      - ./services/nginx/html:/usr/share/nginx/html
      - ./services/nginx/certs:/etc/nginx/certs:ro
      - ./services/nginx/htpasswd:/etc/nginx/htpasswd:ro 
      - ./services/nginx/dhparam:/etc/nginx/dhparam
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./services/nginx/logs:/var/log/nginx/

  nginx-gen:
    container_name: chaingraph_nginx_gen
    image: jwilder/docker-gen
    command: -notify-sighup chaingraph_nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    restart: always
    environment:
      SSL_POLICY: Mozilla-Intermediate
    volumes:
      - ./services/nginx/conf.d:/etc/nginx/conf.d
      - ./services/nginx/vhost.d:/etc/nginx/vhost.d
      - ./services/nginx/html:/usr/share/nginx/html
      - ./services/nginx/certs:/etc/nginx/certs:ro
      - ./services/nginx/htpasswd:/etc/nginx/htpasswd:ro
      - ./services/nginx/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro

  nginx-letsencrypt:
    container_name: chaingraph_nginx_letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion:stable
    restart: always
    volumes:
      - ./services/nginx/conf.d:/etc/nginx/conf.d
      - ./services/nginx/vhost.d:/etc/nginx/vhost.d
      - ./services/nginx/html:/usr/share/nginx/html
      - ./services/nginx/certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      DEFAULT_EMAIL: admin@blockmatic.io
      NGINX_DOCKER_GEN_CONTAINER: chaingraph_nginx_gen
      NGINX_PROXY_CONTAINER: chaingraph_nginx

volumes:
  chaingraph-postgres-data-volume:

networks:
  default:
    name: chaingraph
